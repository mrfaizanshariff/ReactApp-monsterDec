{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","map","Search","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLTC,EAAW,SAACR,GAAD,OAEtB,aADA,CACA,OAAKC,UAAU,YAAf,SAGID,EAAMI,QAAQK,KAAI,SAACL,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPdK,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACpB,uBACEX,UAAU,SACVY,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCsCCI,G,wDAtCb,aAAe,IAAD,8BACZ,gBAcFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXlB,QAAS,GAETe,YAAa,IALH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEd,QAASuB,S,oBAO9C,WAEE,MAAiCC,KAAKN,MAA9BlB,EAAR,EAAQA,QAASe,EAAjB,EAAiBA,YAEXU,EAAmBzB,EAAQ0B,QAAO,SAAC1B,GAAD,OACtCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUR,QAAgCyB,W,GAnChCI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.318ba46d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.component.styles.css\";\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monsters\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\"; //importing the css file\r\nimport { Card } from \"../card/card.component\"; //importing the Card component\r\n\r\nexport const CardList = (props) => (\r\n  //giving the div a class called card-list, which has a css defined on it\r\n  <div className=\"card-list\">\r\n    {\r\n      //using the .map() we are trying to display the monster array in <h1> tag\r\n      props.monster.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))\r\n    }\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const Search = ({ placeHolder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeHolder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","// import logo from \"./logo.svg\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Search } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  //creating the state object by calling the Constructor\n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      //creating a field to store the searched string\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monster: users }));\n  }\n\n  //writing class method as arrow function so the 'this' points to APP class\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    //destructuring the state to implement search filtering\n    const { monster, searchField } = this.state;\n    //this array contains all the monster objects which are filtered using the searchField\n    const filteredMonsters = monster.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeHolder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monster={/*this.state.monster*/ filteredMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n\n// <input\n//           type=\"search\"\n//           placeholder=\"Search Monsters\"\n//           onChange={(e) =>\n//             this.setState(\n//               { searchField: e.target.value } //() =>\n//               //console.log(this.state) // if we immediately wanna know the state as we set it , we have to pass a second arg like this coz setState is async so it'll be one index behind if we log the state after setState is called\n//             )\n//           }\n//         />\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}